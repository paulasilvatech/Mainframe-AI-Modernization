name: Reusable Mainframe CI/CD Workflow

# Reusable workflow template for IBM z/OS mainframe CI/CD with Azure AI Foundry
# This template can be called from other workflows to standardize mainframe CI/CD processes

on:
  workflow_call:
    inputs:
      source-dir:
        description: 'Directory containing mainframe source code'
        required: true
        type: string
        default: 'src'
      environment:
        description: 'Target deployment environment'
        required: false
        type: string
        default: 'development'
      perform-security-scan:
        description: 'Whether to perform security scanning'
        required: false
        type: boolean
        default: true
      deployment-strategy:
        description: 'Deployment strategy to use'
        required: false
        type: string
        default: 'blue-green'
    secrets:
      AZURE_CREDENTIALS:
        required: true
      MAINFRAME_HOST:
        required: true
      MAINFRAME_PORT:
        required: true
      MAINFRAME_USER:
        required: true
      MAINFRAME_PASSWORD:
        required: true

# Environment variables used across jobs
env:
  AZURE_AIFOUNDRY_NAME: mainframe-ai-foundry
  AZURE_RESOURCE_GROUP: mainframe-modernization-rg
  MAINFRAME_AGENT_HOST: ${{ secrets.MAINFRAME_HOST }}
  MAINFRAME_AGENT_PORT: ${{ secrets.MAINFRAME_PORT }}
  MAINFRAME_AGENT_USER: ${{ secrets.MAINFRAME_USER }}
  MAINFRAME_AGENT_PASSWORD: ${{ secrets.MAINFRAME_PASSWORD }}

# Workflow jobs
jobs:
  # Job 1: AI Analysis
  ai-analysis:
    name: AI Foundry Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for AI analysis

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: AI-Powered Code Analysis
        uses: azure/ai-foundry-analysis@v1
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          aifoundry-name: ${{ env.AZURE_AIFOUNDRY_NAME }}
          source-dir: ${{ inputs.source-dir }}
          analysis-type: 'impact'
          include-business-rules: true
          output-file: 'analysis-results.json'
      
      - name: Upload Analysis Results
        uses: actions/upload-artifact@v3
        with:
          name: ai-analysis-results
          path: analysis-results.json

  # Job 2: Build Mainframe Programs
  build:
    name: Build Mainframe Programs
    runs-on: ubuntu-latest
    needs: ai-analysis
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download AI Analysis Results
        uses: actions/download-artifact@v3
        with:
          name: ai-analysis-results
      
      - name: Setup Mainframe Build Agent
        uses: mainframe-tools/setup-builder@v1
        with:
          agent-host: ${{ env.MAINFRAME_AGENT_HOST }}
          agent-port: ${{ env.MAINFRAME_AGENT_PORT }}
          agent-user: ${{ env.MAINFRAME_AGENT_USER }}
          agent-password: ${{ env.MAINFRAME_AGENT_PASSWORD }}
      
      - name: Compile COBOL Programs
        uses: mainframe-tools/compile-cobol@v1
        with:
          source-dir: ${{ inputs.source-dir }}/cobol
          copybook-dir: ${{ inputs.source-dir }}/copybook
          compiler-options: 'RENT,APOST,MAP,LIST'
          build-list-file: 'build-list.txt'
          use-ai-results: true
          ai-results-file: 'analysis-results.json'
      
      - name: Compile PL/I Programs
        uses: mainframe-tools/compile-pli@v1
        with:
          source-dir: ${{ inputs.source-dir }}/pl1
          include-dir: ${{ inputs.source-dir }}/include
          compiler-options: 'MARGINS(2,72,1),NEST'
          build-list-file: 'build-list.txt'
          use-ai-results: true
          ai-results-file: 'analysis-results.json'
      
      - name: Validate JCL
        uses: mainframe-tools/validate-jcl@v1
        with:
          source-dir: ${{ inputs.source-dir }}/jcl
          substitution-vars: './config/jcl-vars.json'
      
      - name: Package Build Artifacts
        run: |
          mkdir -p ./build-output
          cp -r ${{ inputs.source-dir }}/cobol/*.load ./build-output/
          cp -r ${{ inputs.source-dir }}/pl1/*.load ./build-output/
          cp -r ${{ inputs.source-dir }}/jcl/*.jcl ./build-output/
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mainframe-build-output
          path: ./build-output

  # Job 3: Test
  test:
    name: Test Mainframe Programs
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: mainframe-build-output
          path: ./build-output
      
      - name: Setup Mainframe Test Environment
        uses: mainframe-tools/setup-test-env@v1
        with:
          agent-host: ${{ env.MAINFRAME_AGENT_HOST }}
          agent-port: ${{ env.MAINFRAME_AGENT_PORT }}
          agent-user: ${{ env.MAINFRAME_AGENT_USER }}
          agent-password: ${{ env.MAINFRAME_AGENT_PASSWORD }}
          test-environment: ${{ inputs.environment }}
      
      - name: Run Unit Tests
        uses: mainframe-tools/run-unit-tests@v1
        with:
          load-modules: './build-output'
          test-scripts: './test/unit'
          report-output: './test-results/unit'
      
      - name: Run Integration Tests
        uses: mainframe-tools/run-integration-tests@v1
        with:
          load-modules: './build-output'
          test-scripts: './test/integration'
          report-output: './test-results/integration'
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-results

  # Job 4: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.perform-security-scan == true }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: mainframe-build-output
          path: ./build-output
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Run Security Scan
        uses: azure/ai-foundry-security-scan@v1
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          aifoundry-name: ${{ env.AZURE_AIFOUNDRY_NAME }}
          source-dir: ${{ inputs.source-dir }}
          build-output: ./build-output
          scan-type: 'comprehensive'
          output-file: 'security-results.json'
      
      - name: Upload Security Results
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: security-results.json

  # Job 5: Package for Deployment
  package:
    name: Package for Deployment
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: |
      always() && 
      needs.test.result == 'success' && 
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: mainframe-build-output
          path: ./build-output
      
      - name: Download Test Results
        uses: actions/download-artifact@v3
        with:
          name: test-results
          path: ./test-results
      
      - name: Download Security Results
        uses: actions/download-artifact@v3
        with:
          name: security-results
          path: ./security-results
        continue-on-error: true
          
      - name: Generate Deployment Package
        run: |
          mkdir -p ./deployment-package
          cp -r ./build-output/* ./deployment-package/
          
          # Create deployment manifest
          cat > ./deployment-package/manifest.json << EOF
          {
            "version": "${{ github.sha }}",
            "buildTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "repository": "${{ github.repository }}",
            "branch": "${{ github.ref_name }}",
            "components": {
              "cobol": $(find ./build-output -name "*.load" | grep -v "pl1" | jq -R -s -c 'split("\n") | map(select(length > 0))'),
              "pl1": $(find ./build-output -name "*.load" | grep "pl1" | jq -R -s -c 'split("\n") | map(select(length > 0))'),
              "jcl": $(find ./build-output -name "*.jcl" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            }
          }
          EOF
      
      - name: Upload Deployment Package
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: ./deployment-package

  # Job 6: Deploy to Environment
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: package
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download Deployment Package
        uses: actions/download-artifact@v3
        with:
          name: deployment-package
          path: ./deployment-package
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: AI-Powered Deployment Risk Assessment
        uses: azure/ai-foundry-risk-assessment@v1
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          aifoundry-name: ${{ env.AZURE_AIFOUNDRY_NAME }}
          deployment-package: './deployment-package'
          target-environment: ${{ inputs.environment }}
          output-file: 'deployment-risk.json'
      
      - name: Deploy to Mainframe
        uses: mainframe-tools/deploy@v1
        with:
          agent-host: ${{ env.MAINFRAME_AGENT_HOST }}
          agent-port: ${{ env.MAINFRAME_AGENT_PORT }}
          agent-user: ${{ env.MAINFRAME_AGENT_USER }}
          agent-password: ${{ env.MAINFRAME_AGENT_PASSWORD }}
          deployment-package: './deployment-package'
          environment: ${{ inputs.environment }}
          deployment-strategy: ${{ inputs.deployment-strategy }}
          rollback-on-failure: true
      
      - name: Verify Deployment
        uses: mainframe-tools/verify-deployment@v1
        with:
          agent-host: ${{ env.MAINFRAME_AGENT_HOST }}
          agent-port: ${{ env.MAINFRAME_AGENT_PORT }}
          agent-user: ${{ env.MAINFRAME_AGENT_USER }}
          agent-password: ${{ env.MAINFRAME_AGENT_PASSWORD }}
          deployment-package: './deployment-package'
          environment: ${{ inputs.environment }}
          verification-tests: './test/verification' 