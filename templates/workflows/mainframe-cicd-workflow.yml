name: Reusable Mainframe CI/CD Workflow

# Reusable workflow template for multi-platform mainframe CI/CD with Azure AI Foundry
# Supports IBM z/OS, Unisys ClearPath, Bull GCOS, and NEC ACOS mainframe platforms
# This template can be called from other workflows to standardize mainframe CI/CD processes

on:
  workflow_call:
    inputs:
      source-dir:
        description: 'Directory containing mainframe source code'
        required: true
        type: string
        default: 'src'
      platform:
        description: 'Mainframe platform (zos, clearpath, gcos, acos)'
        required: true
        type: string
        default: 'zos'
      environment:
        description: 'Target deployment environment'
        required: false
        type: string
        default: 'development'
      perform-security-scan:
        description: 'Whether to perform security scanning'
        required: false
        type: boolean
        default: true
      deployment-strategy:
        description: 'Deployment strategy to use'
        required: false
        type: string
        default: 'blue-green'
    secrets:
      AZURE_CREDENTIALS:
        required: true
      MAINFRAME_HOST:
        required: true
      MAINFRAME_PORT:
        required: true
      MAINFRAME_USER:
        required: true
      MAINFRAME_PASSWORD:
        required: true

# Environment variables used across jobs
env:
  AZURE_AIFOUNDRY_NAME: mainframe-ai-foundry
  AZURE_RESOURCE_GROUP: mainframe-modernization-rg
  MAINFRAME_AGENT_HOST: ${{ secrets.MAINFRAME_HOST }}
  MAINFRAME_AGENT_PORT: ${{ secrets.MAINFRAME_PORT }}
  MAINFRAME_AGENT_USER: ${{ secrets.MAINFRAME_USER }}
  MAINFRAME_AGENT_PASSWORD: ${{ secrets.MAINFRAME_PASSWORD }}
  MAINFRAME_PLATFORM: ${{ inputs.platform }}

# Workflow jobs
jobs:
  # Job 1: AI Analysis
  ai-analysis:
    name: AI Foundry Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for AI analysis

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: AI-Powered Code Analysis
        uses: azure/ai-foundry-analysis@v1
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          aifoundry-name: ${{ env.AZURE_AIFOUNDRY_NAME }}
          source-dir: ${{ inputs.source-dir }}
          analysis-type: 'impact'
          platform: ${{ env.MAINFRAME_PLATFORM }}
          include-business-rules: true
          output-file: 'analysis-results.json'
      
      - name: Upload Analysis Results
        uses: actions/upload-artifact@v3
        with:
          name: ai-analysis-results
          path: analysis-results.json

  # Job 2: Build Mainframe Programs
  build:
    name: Build Mainframe Programs
    runs-on: ubuntu-latest
    needs: ai-analysis
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download AI Analysis Results
        uses: actions/download-artifact@v3
        with:
          name: ai-analysis-results
      
      - name: Setup Mainframe Build Agent
        uses: mainframe-tools/setup-builder@v1
        with:
          agent-host: ${{ env.MAINFRAME_AGENT_HOST }}
          agent-port: ${{ env.MAINFRAME_AGENT_PORT }}
          agent-user: ${{ env.MAINFRAME_AGENT_USER }}
          agent-password: ${{ env.MAINFRAME_AGENT_PASSWORD }}
          platform: ${{ env.MAINFRAME_PLATFORM }}
      
      # IBM z/OS specific build steps
      - name: Compile COBOL Programs (z/OS)
        if: ${{ env.MAINFRAME_PLATFORM == 'zos' }}
        uses: mainframe-tools/compile-cobol@v1
        with:
          source-dir: ${{ inputs.source-dir }}/cobol
          copybook-dir: ${{ inputs.source-dir }}/copybook
          compiler-options: 'RENT,APOST,MAP,LIST'
          build-list-file: 'build-list.txt'
          use-ai-results: true
          ai-results-file: 'analysis-results.json'
          platform: 'zos'
      
      - name: Compile PL/I Programs (z/OS)
        if: ${{ env.MAINFRAME_PLATFORM == 'zos' }}
        uses: mainframe-tools/compile-pli@v1
        with:
          source-dir: ${{ inputs.source-dir }}/pl1
          include-dir: ${{ inputs.source-dir }}/include
          compiler-options: 'MARGINS(2,72,1),NEST'
          build-list-file: 'build-list.txt'
          use-ai-results: true
          ai-results-file: 'analysis-results.json'
          platform: 'zos'
      
      - name: Validate JCL (z/OS)
        if: ${{ env.MAINFRAME_PLATFORM == 'zos' }}
        uses: mainframe-tools/validate-jcl@v1
        with:
          source-dir: ${{ inputs.source-dir }}/jcl
          substitution-vars: './config/jcl-vars.json'
          platform: 'zos'
      
      # Unisys ClearPath specific build steps
      - name: Compile COBOL Programs (ClearPath)
        if: ${{ env.MAINFRAME_PLATFORM == 'clearpath' }}
        uses: mainframe-tools/compile-cobol@v1
        with:
          source-dir: ${{ inputs.source-dir }}/cobol
          copybook-dir: ${{ inputs.source-dir }}/copybook
          compiler-options: 'ANSI85,XREF'
          build-list-file: 'build-list.txt'
          use-ai-results: true
          ai-results-file: 'analysis-results.json'
          platform: 'clearpath'
      
      - name: Compile Algol Programs (ClearPath)
        if: ${{ env.MAINFRAME_PLATFORM == 'clearpath' }}
        uses: mainframe-tools/compile-algol@v1
        with:
          source-dir: ${{ inputs.source-dir }}/algol
          build-list-file: 'build-list.txt'
          use-ai-results: true
          ai-results-file: 'analysis-results.json'
      
      - name: Validate WFL (ClearPath)
        if: ${{ env.MAINFRAME_PLATFORM == 'clearpath' }}
        uses: mainframe-tools/validate-wfl@v1
        with:
          source-dir: ${{ inputs.source-dir }}/wfl
          substitution-vars: './config/wfl-vars.json'
      
      # Bull GCOS specific build steps
      - name: Compile COBOL Programs (GCOS)
        if: ${{ env.MAINFRAME_PLATFORM == 'gcos' }}
        uses: mainframe-tools/compile-cobol@v1
        with:
          source-dir: ${{ inputs.source-dir }}/cobol
          copybook-dir: ${{ inputs.source-dir }}/copybook
          compiler-options: 'CLIST,MAP'
          build-list-file: 'build-list.txt'
          use-ai-results: true
          ai-results-file: 'analysis-results.json'
          platform: 'gcos'
      
      - name: Validate GCL (GCOS)
        if: ${{ env.MAINFRAME_PLATFORM == 'gcos' }}
        uses: mainframe-tools/validate-gcl@v1
        with:
          source-dir: ${{ inputs.source-dir }}/gcl
          substitution-vars: './config/gcl-vars.json'
      
      # NEC ACOS specific build steps
      - name: Compile COBOL Programs (ACOS)
        if: ${{ env.MAINFRAME_PLATFORM == 'acos' }}
        uses: mainframe-tools/compile-cobol@v1
        with:
          source-dir: ${{ inputs.source-dir }}/cobol
          copybook-dir: ${{ inputs.source-dir }}/copybook
          compiler-options: 'LIST'
          build-list-file: 'build-list.txt'
          use-ai-results: true
          ai-results-file: 'analysis-results.json'
          platform: 'acos'
      
      - name: Validate NCL (ACOS)
        if: ${{ env.MAINFRAME_PLATFORM == 'acos' }}
        uses: mainframe-tools/validate-ncl@v1
        with:
          source-dir: ${{ inputs.source-dir }}/ncl
          substitution-vars: './config/ncl-vars.json'
      
      # Common packaging steps
      - name: Package Build Artifacts
        run: |
          mkdir -p ./build-output
          
          # Platform-specific artifact handling
          case "${{ env.MAINFRAME_PLATFORM }}" in
            zos)
              cp -r ${{ inputs.source-dir }}/cobol/*.load ./build-output/
              cp -r ${{ inputs.source-dir }}/pl1/*.load ./build-output/
              cp -r ${{ inputs.source-dir }}/jcl/*.jcl ./build-output/
              ;;
            clearpath)
              cp -r ${{ inputs.source-dir }}/cobol/*.o ./build-output/
              cp -r ${{ inputs.source-dir }}/algol/*.o ./build-output/
              cp -r ${{ inputs.source-dir }}/wfl/*.wfl ./build-output/
              ;;
            gcos)
              cp -r ${{ inputs.source-dir }}/cobol/*.obj ./build-output/
              cp -r ${{ inputs.source-dir }}/gcl/*.gcl ./build-output/
              ;;
            acos)
              cp -r ${{ inputs.source-dir }}/cobol/*.obj ./build-output/
              cp -r ${{ inputs.source-dir }}/ncl/*.ncl ./build-output/
              ;;
          esac
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mainframe-build-output
          path: ./build-output

  # Job 3: Test
  test:
    name: Test Mainframe Programs
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: mainframe-build-output
          path: ./build-output
      
      - name: Setup Mainframe Test Environment
        uses: mainframe-tools/setup-test-env@v1
        with:
          agent-host: ${{ env.MAINFRAME_AGENT_HOST }}
          agent-port: ${{ env.MAINFRAME_AGENT_PORT }}
          agent-user: ${{ env.MAINFRAME_AGENT_USER }}
          agent-password: ${{ env.MAINFRAME_AGENT_PASSWORD }}
          test-environment: ${{ inputs.environment }}
          platform: ${{ env.MAINFRAME_PLATFORM }}
      
      - name: Run Unit Tests
        uses: mainframe-tools/run-unit-tests@v1
        with:
          load-modules: './build-output'
          test-scripts: './test/unit'
          report-output: './test-results/unit'
          platform: ${{ env.MAINFRAME_PLATFORM }}
      
      - name: Run Integration Tests
        uses: mainframe-tools/run-integration-tests@v1
        with:
          load-modules: './build-output'
          test-scripts: './test/integration'
          report-output: './test-results/integration'
          platform: ${{ env.MAINFRAME_PLATFORM }}
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-results

  # Job 4: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.perform-security-scan == true }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: mainframe-build-output
          path: ./build-output
      
      - name: Run Security Analysis
        uses: mainframe-tools/security-analysis@v1
        with:
          source-dir: ${{ inputs.source-dir }}
          build-artifacts: './build-output'
          scan-level: 'comprehensive'
          platform: ${{ env.MAINFRAME_PLATFORM }}
          output-file: './security-report.json'
      
      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: './security-report.json'

  # Job 5: Deploy
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: ${{ always() && needs.test.result == 'success' && (needs.security-scan.result == 'success' || inputs.perform-security-scan == false) }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: mainframe-build-output
          path: './build-output'
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Setup Deployment Agent
        uses: mainframe-tools/setup-deployment@v1
        with:
          agent-host: ${{ env.MAINFRAME_AGENT_HOST }}
          agent-port: ${{ env.MAINFRAME_AGENT_PORT }}
          agent-user: ${{ env.MAINFRAME_AGENT_USER }}
          agent-password: ${{ env.MAINFRAME_AGENT_PASSWORD }}
          platform: ${{ env.MAINFRAME_PLATFORM }}
          environment: ${{ inputs.environment }}
          deployment-strategy: ${{ inputs.deployment-strategy }}
      
      # Platform-specific deployment steps
      - name: Deploy to IBM z/OS
        if: ${{ env.MAINFRAME_PLATFORM == 'zos' }}
        uses: mainframe-tools/deploy-zos@v1
        with:
          build-artifacts: './build-output'
          deployment-config: './config/deployment/zos-config.json'
          environment: ${{ inputs.environment }}
          strategy: ${{ inputs.deployment-strategy }}
      
      - name: Deploy to Unisys ClearPath
        if: ${{ env.MAINFRAME_PLATFORM == 'clearpath' }}
        uses: mainframe-tools/deploy-clearpath@v1
        with:
          build-artifacts: './build-output'
          deployment-config: './config/deployment/clearpath-config.json'
          environment: ${{ inputs.environment }}
          strategy: ${{ inputs.deployment-strategy }}
      
      - name: Deploy to Bull GCOS
        if: ${{ env.MAINFRAME_PLATFORM == 'gcos' }}
        uses: mainframe-tools/deploy-gcos@v1
        with:
          build-artifacts: './build-output'
          deployment-config: './config/deployment/gcos-config.json'
          environment: ${{ inputs.environment }}
          strategy: ${{ inputs.deployment-strategy }}
      
      - name: Deploy to NEC ACOS
        if: ${{ env.MAINFRAME_PLATFORM == 'acos' }}
        uses: mainframe-tools/deploy-acos@v1
        with:
          build-artifacts: './build-output'
          deployment-config: './config/deployment/acos-config.json'
          environment: ${{ inputs.environment }}
          strategy: ${{ inputs.deployment-strategy }}
      
      - name: Verify Deployment
        uses: mainframe-tools/verify-deployment@v1
        with:
          environment: ${{ inputs.environment }}
          platform: ${{ env.MAINFRAME_PLATFORM }}
          verification-scripts: './test/verification'
          report-output: './verification-report.json'
      
      - name: Upload Verification Report
        uses: actions/upload-artifact@v3
        with:
          name: verification-report
          path: './verification-report.json' 